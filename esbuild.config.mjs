import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import inlineWorkerPlugin from "esbuild-plugin-inline-worker";
import sveltePlugin from "esbuild-svelte";
import sveltePreprocess from "svelte-preprocess";
import { copyFilesPlugin } from './copy-files-plugin.mjs';

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: {
		'main': 'src/main.ts',
		'styles': 'styles.css'
	},
	outdir: "dist",
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	define: {
		"process.env.NODE_ENV": prod ? '"production"' : '"development"'
	},
	loader: {
		".ts": "ts",
		".css": "css"
	},
	plugins: [
		sveltePlugin({
			preprocess: sveltePreprocess({
				typescript: true
			})
		}),
		inlineWorkerPlugin({
			target: 'es2018',
			format: 'cjs',
		}),
		copyFilesPlugin([
			{ from: './manifest.json', to: './dist/manifest.json' }
		])
	]
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}